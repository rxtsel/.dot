gui:
  nerdFontsVersion: "3"
  theme:
    activeBorderColor:
      - "#c94c16"
      - "bold"
    inactiveBorderColor:
      - "#664c00"
    searchingActiveBorderColor:
      - "#c94c16"
      - "bold"
    optionsTextColor:
      - "#268bd3"
    selectedLineBgColor:
      - "#1a6397"
    cherryPickedCommitFgColor:
      - "#268bd3"
    cherryPickedCommitBgColor:
      - "#d23681"
    markedBaseCommitFgColor:
      - "#268bd3"
    markedBaseCommitBgColor:
      - "#b28500"
    unstagedChangesColor:
      - "#f55350"
    defaultFgColor:
      - "#839395"
customCommands:
  - key: <c-a>
    description: Pick AI commit
    context: global
    prompts:
      - type: menuFromCommand
        title: Select AI Commit Message
        key: CommitMsg
        command: |
          bash -c "
          # Check for staged changes
          diff=\$(git diff --cached | head -n 10)
          if [ -z \"\$diff\" ]; then
            echo \"No changes in staging. Add changes first.\"
            exit 1
          fi

          COMMITS_TO_SUGGEST=10  # Required quantity per final example

          aichat \"

          You are an expert at writing Git commits. Your job is to write a short, clear commit message that summarizes the changes using the Conventional Commits format.

          Follow these guidelines for Conventional Commits:

          - Always use one of these types:
          feat, fix, docs, style, refactor, perf, test, build, ci, chore

          - Structure:
          <type>(<scope>): <description>

          Example:
          feat(auth): add OAuth login support

          - Scope is optional but encouraged (put the affected component or area)

          - Use an exclamation mark (!) after type/scope for breaking changes:
          feat(api)!: change API response format

          - Use lowercase for the description (unless it includes proper nouns like \"React\" or \"GitHub\")
          - Do not end the subject line with a period
          - Use the imperative mood (e.g., \"add\", not \"added\" or \"adds\")
          - Limit the subject line to 50 characters when possible

          Examples:
          chore(config): update ESLint rules
          fix(login): prevent crash on empty password
          docs(readme): add installation instructions
          style(css): fix button alignment on mobile
          feat(ui): add dark mode toggle
          refactor(settings): simplify theme loading logic
          test(home): add unit tests for sidebar
          build(deps): upgrade to React 18
          ci(github): fix broken deployment workflow
          perf(api): optimize response time for profile endpoint

          For the commit message body:
          - Add a body only if the change is complex or needs explanation
          - Always add a body for breaking changes, with a 'BREAKING CHANGE:' section
          - Separate the body from the subject line with a blank line
          - Wrap body text at 72 characters
          - In the body, explain **what** and **why**, not **how**

          Example with body:

          feat(theme): add system dark mode support

          This change adds automatic detection of system dark/light theme.
          It falls back to manual theme setting if system preference is unavailable.

          Example with breaking change:

          refactor(routes)!: update router structure for nested layouts

          BREAKING CHANGE: All route definitions must now include layout wrappers.

          General Git style notes:
          - Capitalize only proper nouns and acronyms in the description
          - Commas are allowed; periods at the end of the subject are discouraged

          Only return the commit message(s) in your response. Do not include any additional meta-commentary.

          Generate $COMMITS_TO_SUGGEST different commit suggestions.

          IMPORTANT:
          - Do not wrap your response in markdown code blocks
          - Do not use \\\`\\\`\\\` or any other formatting
          - Just list each commit message directly, one per line

          Here is an example of previous commit messages in this repository:

          \$(git log | head -n 10)

          Here is the diff:

          \$(git diff --cached)
          \""
    command: "# Create a temporary file for the commit message\ncommit_msg_file=$(mktemp)\n\n# Clean the suggestions and save them to the file\ncommit_suggestions=$(echo \"{{.Form.CommitMsg}}\" | \\\n  sed 's/```[a-zA-Z]*//g' | \\\n  sed 's/```//g' | \\\n  sed 's/^[ \\t]*//g' | \\\n  sed 's/[ \\t]*$//g')\n\n# Write the suggestions to the temporary file\necho \"$commit_suggestions\" > \"$commit_msg_file\"\n\n# Saves the initial modification timestamp of the file\ninitial_timestamp=$(stat -c %Y \"$commit_msg_file\" 2>/dev/null || stat -f %m \"$commit_msg_file\")\n\n# Opens the commit message editor and captures the exit code\n${EDITOR:-vim} \"$commit_msg_file\"\neditor_exit=$?\n\n# Gets the new modification timestamp\nnew_timestamp=$(stat -c %Y \"$commit_msg_file\" 2>/dev/null || stat -f %m \"$commit_msg_file\")\n\n# Checks if the editor exited normally and if the file was saved\nif [ $editor_exit -ne 0 ]; then\n    echo \"Editor exited abnormally, commit aborted.\"\nelif [ \"$initial_timestamp\" != \"$new_timestamp\" ]; then\n    # The file was saved (timestamp has changed)\n    selected_msg=$(grep -v \"^#\" \"$commit_msg_file\" | grep -v \"^$\" | head -n 1)\n    \n    if [ -n \"$selected_msg\" ]; then\n        echo \"Creating commit with message: $selected_msg\"\n        git commit -m \"$selected_msg\"\n    else\n        echo \"No commit message selected, commit aborted.\"\n    fi\nelse\n    echo \"File was not saved, commit aborted.\"\nfi\n\n# Clean temp files\nrm -f \"$commit_msg_file\"\n"
    output: terminal
    loadingText: "Generating conventional commit suggestions with AI"

  - key: "<c-v>"
    context: "global"
    description: "Create new conventional commit"
    prompts:
      - type: "menu"
        key: "Type"
        title: "Type of change"
        options:
          - name: "build"
            description: "Changes that affect the build system or external dependencies"
            value: "build"
          - name: "feat"
            description: "A new feature"
            value: "feat"
          - name: "fix"
            description: "A bug fix"
            value: "fix"
          - name: "chore"
            description: "Other changes that don't modify src or test files"
            value: "chore"
          - name: "ci"
            description: "Changes to CI configuration files and scripts"
            value: "ci"
          - name: "docs"
            description: "Documentation only changes"
            value: "docs"
          - name: "perf"
            description: "A code change that improves performance"
            value: "perf"
          - name: "refactor"
            description: "A code change that neither fixes a bug nor adds a feature"
            value: "refactor"
          - name: "revert"
            description: "Reverts a previous commit"
            value: "revert"
          - name: "style"
            description: "Changes that do not affect the meaning of the code"
            value: "style"
          - name: "test"
            description: "Adding missing tests or correcting existing tests"
            value: "test"
      - type: "input"
        title: "Scope"
        key: "Scope"
        initialValue: ""
      - type: "menu"
        key: "Breaking"
        title: "Breaking change"
        options:
          - name: "no"
            value: ""
          - name: "yes"
            value: "!"
      - type: "input"
        title: "message"
        key: "Message"
        initialValue: ""
      - type: "confirm"
        key: "Confirm"
        title: "Commit"
        body: "Are you sure you want to commit?"
    command: "git commit --message '{{.Form.Type}}{{ if .Form.Scope }}({{ .Form.Scope }}){{ end }}{{.Form.Breaking}}: {{.Form.Message}}'"
    loadingText: "Creating conventional commit..."
