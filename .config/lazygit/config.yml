gui:
  nerdFontsVersion: "3"
  theme:
    activeBorderColor:
      - "#c94c16"
      - "bold"
    inactiveBorderColor:
      - "#664c00"
    searchingActiveBorderColor:
      - "#c94c16"
      - "bold"
    optionsTextColor:
      - "#268bd3"
    selectedLineBgColor:
      - "#1a6397"
    cherryPickedCommitFgColor:
      - "#268bd3"
    cherryPickedCommitBgColor:
      - "#d23681"
    markedBaseCommitFgColor:
      - "#268bd3"
    markedBaseCommitBgColor:
      - "#b28500"
    unstagedChangesColor:
      - "#f55350"
    defaultFgColor:
      - "#839395"
customCommands:
  - key: <c-a>
    description: Pick AI commit
    context: global
    prompts:
      - type: menuFromCommand
        title: Select AI Commit Message
        key: CommitMsg
        command: |
          bash -c "
          # Check for staged changes
          diff=\$(git diff --cached | head -n 10)
          if [ -z \"\$diff\" ]; then
            echo \"No changes in staging. Add changes first.\"
            exit 1
          fi

          COMMITS_TO_SUGGEST=10  # Required quantity per final example

          aichat --model github:gpt-4o \"

          You are an expert at writing Git commits. Your job is to write a short clear commit message that summarizes the changes using conventional commits format.

          Follow these guidelines for conventional commits:
          - Always use one of these types: feat, fix, docs, style, refactor, perf, test, build, ci, chore
          - Structure: <type>(<scope>): <description>
            Example: feat(auth): add OAuth login support
          - Scope is optional but encouraged (put component or area affected)
          - Use ! after type/scope for breaking changes: feat(api)!: change API response format

          For the commit message body:
          - Add a detailed body when the change is complex or requires explanation
          - Always add a body for breaking changes with 'BREAKING CHANGE:' prefix
          - Separate body from subject with a blank line
          - Explain 'what' and 'why' in the body, not 'how'
          - Wrap body text at 72 characters
          - Example body format:
            
            This commit introduces X to solve Y problem.
            
            BREAKING CHANGE: API endpoint Z now returns JSON instead of XML.

          General Git style rules:
          - Try to limit the subject line to 50 characters
          - Capitalize the subject line
          - Do not end the subject line with any punctuation
          - Use the imperative mood in the subject line

          Only return the commit message(s) in your response. Do not include any additional meta-commentary.
          Generate $COMMITS_TO_SUGGEST different commit suggestions.

          IMPORTANT: Do not wrap your response in markdown code blocks. Do not use \\\`\\\`\\\` in your response at all.
          Just list each commit message directly, one per line.

          Here is an example of previous commit messages in this repository:

          \$(git log | head -n 10)

          Here is the diff:

          \$(git diff --cached)
          \""
    command: "# Create a temporary file for the commit message\ncommit_msg_file=$(mktemp)\n\n# Clean the suggestions and save them to the file\ncommit_suggestions=$(echo \"{{.Form.CommitMsg}}\" | \\\n  sed 's/```[a-zA-Z]*//g' | \\\n  sed 's/```//g' | \\\n  sed 's/^[ \\t]*//g' | \\\n  sed 's/[ \\t]*$//g')\n\n# Write the suggestions to the temporary file\necho \"$commit_suggestions\" > \"$commit_msg_file\"\n\n# Saves the initial modification timestamp of the file\ninitial_timestamp=$(stat -c %Y \"$commit_msg_file\" 2>/dev/null || stat -f %m \"$commit_msg_file\")\n\n# Opens the commit message editor and captures the exit code\n${EDITOR:-vim} \"$commit_msg_file\"\neditor_exit=$?\n\n# Gets the new modification timestamp\nnew_timestamp=$(stat -c %Y \"$commit_msg_file\" 2>/dev/null || stat -f %m \"$commit_msg_file\")\n\n# Checks if the editor exited normally and if the file was saved\nif [ $editor_exit -ne 0 ]; then\n    echo \"Editor exited abnormally, commit aborted.\"\nelif [ \"$initial_timestamp\" != \"$new_timestamp\" ]; then\n    # The file was saved (timestamp has changed)\n    selected_msg=$(grep -v \"^#\" \"$commit_msg_file\" | grep -v \"^$\" | head -n 1)\n    \n    if [ -n \"$selected_msg\" ]; then\n        echo \"Creating commit with message: $selected_msg\"\n        git commit -m \"$selected_msg\"\n    else\n        echo \"No commit message selected, commit aborted.\"\n    fi\nelse\n    echo \"File was not saved, commit aborted.\"\nfi\n\n# Clean temp files\nrm -f \"$commit_msg_file\"\n"
    output: terminal
